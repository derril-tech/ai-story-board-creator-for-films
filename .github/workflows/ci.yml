name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: api
            path: api
            language: node
          - name: frontend
            path: frontend
            language: node
          - name: workers
            path: workers
            language: python

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.language == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.path }}/package-lock.json

      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        if: matrix.language == 'node'
        run: |
          cd ${{ matrix.path }}
          npm ci

      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          cd ${{ matrix.path }}
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint
        if: matrix.language == 'node'
        run: |
          cd ${{ matrix.path }}
          npm run lint

      - name: Lint Python
        if: matrix.language == 'python'
        run: |
          cd ${{ matrix.path }}
          flake8 .
          black --check .
          isort --check-only .

      - name: Type check
        if: matrix.language == 'node'
        run: |
          cd ${{ matrix.path }}
          npm run type-check

      - name: Run tests
        if: matrix.language == 'node'
        run: |
          cd ${{ matrix.path }}
          npm run test:ci

      - name: Run Python tests
        if: matrix.language == 'python'
        run: |
          cd ${{ matrix.path }}
          pytest --cov=. --cov-report=xml

  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ai-storyboard-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ai-storyboard-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Workers image
        uses: docker/build-push-action@v5
        with:
          context: ./workers
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ai-storyboard-workers:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add deployment logic here
